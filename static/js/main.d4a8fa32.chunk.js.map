{"version":3,"sources":["Buttons.js","Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Buttons","props","react_default","a","createElement","es","bsStyle","onClick","takeValue","values","Calculator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","calculatorState","arrayOfValues","leftSideValues","value","rightSideValues","bind","assertThisInitialized","setState","toConsumableArray","concat","_this2","map","valueObject","src_Buttons","key","_this3","className","renderLeftSideValues","renderRightSideValues","Component","App","src_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAmBeA,MAbf,SAAiBC,GAIb,OAAQC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,QAASL,EAAMK,QAASC,QAHxC,WACEN,EAAMO,UAAUP,EAAMQ,UAEuCR,EAAMQ,SCiE1DC,cAvEb,SAAAA,EAAYT,GAAO,IAAAU,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMb,KACDiB,MAAQ,CACXC,gBAAiB,EACjBC,cAAe,GACfC,eAAgB,CACd,CAACC,MAAO,KACR,CAACA,MAAO,KACR,CAACA,MAAO,KACR,CAACA,MAAO,KACR,CAACA,MAAO,KACR,CAACA,MAAO,KACR,CAACA,MAAO,KACR,CAACA,MAAO,KACR,CAACA,MAAO,KACR,CAACA,MAAO,KACR,CAACA,MAAO,KACR,CAAChB,QAAS,UAAUgB,MAAO,MAC7BC,gBAAiB,CACf,CAACjB,QAAS,OAAQgB,MAAO,KACzB,CAAChB,QAAS,OAAQgB,MAAO,KACzB,CAAChB,QAAS,OAAQgB,MAAO,KACzB,CAAChB,QAAS,OAAQgB,MAAO,KACzB,CAAChB,QAAS,OAAQgB,MAAO,KACzB,CAAChB,QAAS,OAAQgB,MAAO,KACzB,CAAChB,QAAS,SAAUgB,MAAO,OAC3B,CAAChB,QAAS,OAAQgB,MAAO,OAG7BX,EAAKH,UAAYG,EAAKH,UAAUgB,KAAfZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KA7BAA,yEAgCTW,GACRR,KAAKY,SAAS,CACZN,cAAcR,OAAAe,EAAA,EAAAf,CAAKE,KAAKI,MAAME,eAAjBQ,OAAA,CAAgCN,qDAG3B,IAAAO,EAAAf,KACpB,OAAOA,KAAKI,MAAMG,eAAeS,IAAI,SAACC,GACpC,OACE7B,EAAAC,EAAAC,cAAC4B,EAAD,CAASC,IAAKF,EAAYT,MAAOhB,QAASyB,EAAYzB,QAASE,UAAWqB,EAAKrB,UAAWC,OAAQsB,EAAYT,0DAK7F,IAAAY,EAAApB,KACrB,OAAOA,KAAKI,MAAMK,gBAAgBO,IAAI,SAACC,GACrC,OACE7B,EAAAC,EAAAC,cAAC4B,EAAD,CAASC,IAAKF,EAAYT,MAAOhB,QAASyB,EAAYzB,QAASE,UAAW0B,EAAK1B,UAAWC,OAAQsB,EAAYT,2CAMlH,OACEpB,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,cACbjC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,eAAcjC,EAAAC,EAAAC,cAAA,UAAKU,KAAKI,MAAME,gBAC7ClB,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,OACXjC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,YACZrB,KAAKsB,wBAERlC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,aACbrB,KAAKuB,kCA/DMC,aCWVC,mLARX,OACErC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,OACbjC,EAAAC,EAAAC,cAACoC,EAAD,cAJUF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d4a8fa32.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nfunction Buttons(props){\r\n    function handleClick() {\r\n      props.takeValue(props.values)\r\n    }\r\n    return (<Button bsStyle={props.bsStyle} onClick={handleClick}>{props.values}</Button>);\r\n}\r\n\r\nButtons.propTypes = {\r\n  takeValue: PropTypes.func,\r\n  values: PropTypes.string,\r\n  bsStyle: PropTypes.string\r\n};\r\n\r\nexport default Buttons;\r\n","import React, {Component} from 'react';\r\nimport Buttons from \"./Buttons\";\r\n\r\nclass Calculator extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      calculatorState: 0,\r\n      arrayOfValues: [],\r\n      leftSideValues: [\r\n        {value: '1'},\r\n        {value: '2'},\r\n        {value: '3'},\r\n        {value: '4'},\r\n        {value: '5'},\r\n        {value: '6'},\r\n        {value: '7'},\r\n        {value: '8'},\r\n        {value: '9'},\r\n        {value: '0'},\r\n        {value: '.'},\r\n        {bsStyle: \"success\",value: '='}],\r\n      rightSideValues: [\r\n        {bsStyle: \"info\", value: '('},\r\n        {bsStyle: \"info\", value: ')'},\r\n        {bsStyle: \"info\", value: '+'},\r\n        {bsStyle: \"info\", value: '-'},\r\n        {bsStyle: \"info\", value: '*'},\r\n        {bsStyle: \"info\", value: '/'},\r\n        {bsStyle: \"danger\", value: 'clr'},\r\n        {bsStyle: \"info\", value: '%'}]\r\n    };\r\n\r\n    this.takeValue = this.takeValue.bind(this);\r\n  }\r\n\r\n  takeValue(value){\r\n    this.setState({\r\n      arrayOfValues: [...this.state.arrayOfValues, value]\r\n    })\r\n  }\r\n  renderLeftSideValues(){\r\n    return this.state.leftSideValues.map((valueObject) => {\r\n      return (\r\n        <Buttons key={valueObject.value} bsStyle={valueObject.bsStyle} takeValue={this.takeValue} values={valueObject.value} />\r\n      );\r\n    })\r\n  }\r\n\r\n  renderRightSideValues(){\r\n    return this.state.rightSideValues.map((valueObject) => {\r\n      return (\r\n        <Buttons key={valueObject.value} bsStyle={valueObject.bsStyle} takeValue={this.takeValue} values={valueObject.value} />\r\n      );\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Calculator\">\r\n        <div className=\"displayView\"><h4>{this.state.arrayOfValues}</h4></div>\r\n        <div className=\"row\">\r\n            <div className=\"leftSide\">\r\n              {this.renderLeftSideValues()}\r\n            </div>\r\n            <div className=\"rightSide\">\r\n             {this.renderRightSideValues()}\r\n            </div>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Calculator from \"./Calculator\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}